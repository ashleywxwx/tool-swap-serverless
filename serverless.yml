org: recursivechaos
app: tool-swap
service: tool-swap-serverless

provider:
  name: aws
  region: us-east-1
  stage: dev
  memorySize: 256
  runtime: nodejs12.x
  iam:
    role: LambdaRole
  environment:
    AURORA_HOST: ${self:custom.AURORA.HOST}
    AURORA_PORT: ${self:custom.AURORA.PORT}
    DB_NAME: ${self:custom.DB_NAME}
    USERNAME: ${self:custom.USERNAME}
    PASSWORD: ${self:custom.PASSWORD}
custom:
  DB_NAME: toolswap
  USERNAME: master
  PASSWORD: password
  AURORA:
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: 10

plugins:
  - serverless-pseudo-parameters
resources:
  Resources:
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}

    AuroraRDSClusterParameter: ${file(./resource/AuroraRDSClusterParameter.yml)}
    AuroraRDSInstanceParameter: ${file(./resource/AuroraRDSInstanceParameter.yml)}
    AuroraRDSCluster: ${file(./resource/AuroraRDSCluster.yml)}
    AuroraRDSInstance: ${file(./resource/AuroraRDSInstance.yml)}

functions:
  getUser:
    handler: src/routes/getUser.getUser
    events:
      - httpApi:
          path: /users/user/{userId}
          method: get
  getUsers:
    handler: src/routes/getUsers.getUsers
    events:
      - httpApi:
          path: /users
          method: get
  postUser:
    handler: src/routes/postUser.postUser
    events:
      - httpApi:
          path: /users/user
          method: post
  getHealth:
    handler: src/routes/getHealth.getHealth
    events:
      - httpApi:
          path: /health
          method: get
  postInit:
    handler: src/routes/postInit.postInit
    events:
      - httpApi:
          path: /admin/init
          method: post